// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/zelas91/metric-collector/internal/server/types"
)

// MockMemRepository is a mock of MemRepository interface.
type MockMemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMemRepositoryMockRecorder
}

// MockMemRepositoryMockRecorder is the mock recorder for MockMemRepository.
type MockMemRepositoryMockRecorder struct {
	mock *MockMemRepository
}

// NewMockMemRepository creates a new mock instance.
func NewMockMemRepository(ctrl *gomock.Controller) *MockMemRepository {
	mock := &MockMemRepository{ctrl: ctrl}
	mock.recorder = &MockMemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemRepository) EXPECT() *MockMemRepositoryMockRecorder {
	return m.recorder
}

// AddMetricCounter mocks base method.
func (m *MockMemRepository) AddMetricCounter(name string, value int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetricCounter", name, value)
	ret0, _ := ret[0].(int64)
	return ret0
}

// AddMetricCounter indicates an expected call of AddMetricCounter.
func (mr *MockMemRepositoryMockRecorder) AddMetricCounter(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetricCounter", reflect.TypeOf((*MockMemRepository)(nil).AddMetricCounter), name, value)
}

// AddMetricGauge mocks base method.
func (m *MockMemRepository) AddMetricGauge(name string, value float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetricGauge", name, value)
	ret0, _ := ret[0].(float64)
	return ret0
}

// AddMetricGauge indicates an expected call of AddMetricGauge.
func (mr *MockMemRepositoryMockRecorder) AddMetricGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetricGauge", reflect.TypeOf((*MockMemRepository)(nil).AddMetricGauge), name, value)
}

// GetByType mocks base method.
func (m *MockMemRepository) GetByType(t string) (map[string]types.MetricTypeValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByType", t)
	ret0, _ := ret[0].(map[string]types.MetricTypeValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByType indicates an expected call of GetByType.
func (mr *MockMemRepositoryMockRecorder) GetByType(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByType", reflect.TypeOf((*MockMemRepository)(nil).GetByType), t)
}

// Ping mocks base method.
func (m *MockMemRepository) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMemRepositoryMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMemRepository)(nil).Ping))
}

// ReadMetric mocks base method.
func (m *MockMemRepository) ReadMetric(name, t string) types.MetricTypeValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMetric", name, t)
	ret0, _ := ret[0].(types.MetricTypeValue)
	return ret0
}

// ReadMetric indicates an expected call of ReadMetric.
func (mr *MockMemRepositoryMockRecorder) ReadMetric(name, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMetric", reflect.TypeOf((*MockMemRepository)(nil).ReadMetric), name, t)
}

// Shutdown mocks base method.
func (m *MockMemRepository) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockMemRepositoryMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockMemRepository)(nil).Shutdown))
}
